#ifndef _Algorithm_h
#define _Algorithm_h

#include <LongitudinalModel.h>
#include "../Samplers/AbstractSampler.h"

typedef std::vector<std::vector<std::pair<double, std::vector<double>>>> Data;


class Algorithm {
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // typedef :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    Algorithm();
    ~Algorithm();


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getter(s) and Setter(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Set the longitudinal model used
    void SetModel(LongitudinalModel *M);

    // Set the data
    void SetData(Data *D);

    // Set the sampler
    void SetSampler(AbstractSampler *S);


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Simulation step of the MCMC SAEM
    void ComputeMCMCSAEM();

protected:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Attribute(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Longitudinal model
    LongitudinalModel *m_Model;

    // Data
    Data *m_Data;

    // Sampler
    AbstractSampler *m_Sampler;

    // Initiate the model; need the data and model to be set
    bool m_InitiateModel;

    // Sufficient statistics of the MCMC SAEM algorithm
    std::vector<std::vector<double>> m_SufficientStatistics;


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // MCMC SAEM Methods :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Compute the first step : simulation step
    void ComputeSimulationStep();

    // Compute the seccond step : Compute the sufficient statistics
    void ComputeSufficientStatistics();

    // Compute the third step : Compute the stochastic approximation step
    void ComputeStochasticApproximation();

    // Compute the fourth step : Maximization step
    void MaximizationStep();

};


#endif //_Algorithm_h
