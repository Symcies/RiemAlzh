#ifndef _AbstractManifold_h
#define _AbstractManifold_h

#include <vector>
#include <cmath>        // exp

class AbstractManifold {
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // typedef :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getter(s) and Setter(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Get the number of dimension
    inline int GetNumberOfDimension() const { return m_Dimension; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Compute parallel Curve
    virtual std::vector<double> ComputeParallelCurve(double P0, double T0, double V0, std::vector<double> W0, double T) = 0;


protected:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Attribute(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Dimension of the manifold
    int m_Dimension;


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Compute geodesic
    virtual double ComputeGeodesic(double P0, double T0, double V0, double T) = 0;

    // Compute parallel transport of vector W0
    virtual std::vector<double> ComputeParallelTransport(double P0, double T0, double V0, std::vector<double> W0, double T) = 0;

};


#endif //_AbstractManifold_h
