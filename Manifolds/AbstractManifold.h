#ifndef _AbstractManifold_h
#define _AbstractManifold_h

#include <vector>
#include <cmath>        // exp
#include <iostream>     //cout


class AbstractManifold {
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // typedef :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    AbstractManifold();
    ~AbstractManifold();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getter(s) and Setter(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Get the number of dimension of the manifold
    int GetNumberOfDimension() {return m_DimensionNumber; };


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Compute the Riemannian metric
    virtual double ComputeMetric(std::vector<double> u, std::vector<double> v, std::vector<double> p) = 0;

    // Compute geodesic
    virtual std::vector<double> ComputeGeodesic(double P0, double T0, double V0, double T) = 0;

    // Compute parallel Curve
    virtual std::vector<double> ComputeParallelCurve(double P0, double T0, double V0, std::vector<double> W0, double T) = 0;


protected:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Attribute(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Dimension of the manifold
    int m_DimensionNumber;


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////


    // Compute parallel transport of vector W0
    virtual std::vector<double> ComputeParallelTransport(double P0, double T0, double V0, std::vector<double> W0, double T) = 0;

};


#endif //_AbstractManifold_h
