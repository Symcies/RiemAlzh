#ifndef _DataSettings_h
#define _DataSettings_h

typedef double ScalarType;

#include <string>
#include <iostream>

#include "tinyxml2.h"


class DataSettings {
public:
    
        
    ////////////////////////////////////////////////////////////////////////////////////////////////
    // typedef :
    ////////////////////////////////////////////////////////////////////////////////////////////////

    
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////
    
    DataSettings(const char* XMLFile);
    
    ~DataSettings();    
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Encapsulation method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////
    
    std::string GetPathToGroup() const { return m_PathToGroup; }
    
    std::string GetPathToTimepoints() const { return m_PathToTimepoints; }
    
    std::string GetPathToObservations() const { return m_PathToObservations; }
    
    unsigned int GetNumberOfSimulatedSubjects() const { return m_NumberOfSubjects; }
    
    unsigned int GetMinimumNumberOfObservations() const { return m_MinimumNumberOfObservations; }
    
    unsigned int GetMaximumNumberOfObservations() const { return m_MaximumNumberOfObservations; }
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////

    bool RealData() const { return m_RealData; }
    
private:
    
    /// Read real data if true
    bool m_RealData;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Attribute(s) for real data :
    ////////////////////////////////////////////////////////////////////////////////////////////////
    
    /// Path to data
    std::string m_PathToData;
    
    /// Path to group csv
    std::string m_PathToGroup;
    
    /// Path to timepoint csv
    std::string m_PathToTimepoints;
    
    /// Path to observations csv
    std::string m_PathToObservations;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Attribute(s) for simulated data :
    ////////////////////////////////////////////////////////////////////////////////////////////////
    
    /// NumberOfIndividuals to simulate
    unsigned int m_NumberOfSubjects;
    
    /// Minimum number of observations
    unsigned int m_MinimumNumberOfObservations;
    
    /// Maximum number of observations
    unsigned int m_MaximumNumberOfObservations;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////

    /// Load real data settings
    void LoadRealDataSettings(const char* XMLFile);
    
    /// Load simulated data settings
    void LoadSimulatedDataSettings(const char* XMLFile);
    
    
};


#endif //_DataSettings_h
