#pragma once

#include <algorithm>
#include <map>
#include <memory>
#include <string>

#include "GaussianRandomVariable.h"
#include "AbstractModel.h"
#include "CandidateRandomVariables.h"
#include "Realizations.h"

class AbstractSampler {
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // typedef :
    ////////////////////////////////////////////////////////////////////////////////////////////////////


    typedef typename LinearAlgebra<ScalarType>::MatrixType MatrixType;
    typedef typename LinearAlgebra<ScalarType>::VectorType VectorType;

    typedef std::vector<std::pair<std::string,  unsigned int>> MiniBlock;
    typedef std::pair<int, MiniBlock> SamplerBlock;


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    AbstractSampler();
    ~AbstractSampler();


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Encapsulation method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    /// Initialize the sampler
    virtual void InitializeSampler(Realizations& reals, AbstractModel &model) = 0;

    /// Sample new realizations of the model random variables
    virtual void Sample(Realizations& reals, AbstractModel& model, const Observations& obs) = 0;


protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    /// Compute the decreasing step size of the adaptive variances
    double DecreasingStepSize(int iter, int no_memory_time);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Attribute(s)
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    /// Blocks of the sampler
    std::vector<SamplerBlock> blocks_;

    /// Sampling time without memory
    unsigned int memoryless_sampling_time_ = 10000;

    /// Acceptation ratio
    double expected_acceptance_ratio_ = 0.301;

    /// Candidates random variables, corresponding to those in the Model
    CandidateRandomVariables candidate_rand_var_;


};
