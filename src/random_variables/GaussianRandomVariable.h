#ifndef _GaussianRandomVariable_h
#define _GaussianRandomVariable_h


#include "AbstractRandomVariable.h"

class GaussianRandomVariable : public AbstractRandomVariable{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GaussianRandomVariable(double Mean, double Variance);
    ~GaussianRandomVariable();

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Getter(s) and Setter(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////

    virtual ScalarType GetParameter(std::string ParameterName) const;
    virtual ScalarType GetParameter(int ParameterKey) const;
    
    inline double GetVariance() const { return m_Variance; }

    inline double GetMean() const { return m_Mean; }

    inline void SetMean(double Mean) { m_Mean = Mean; };

    inline void SetVariance(double Variance) {m_Variance = Variance; };

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /// Draw a sample
    virtual double Sample();

    /// Compute the likelihood given a current state
    virtual double Likelihood(double X);
    
    /// Compute the loglikelihood given a current state
    virtual double LogLikelihood(double X);
    
    /// Update the random variable parameters
    virtual void Update(StringScalarHash Parameters);
    virtual void Update(IntScalarHash    Parameters);

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Attribute(s)
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    /// Mean of the Gaussian
    double m_Mean;

    /// Variance of the Gaussian
    double m_Variance;

};


#endif //_GaussianRandomVariable_h
