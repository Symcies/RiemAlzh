#pragma once

#include "AbstractSampler.h"

class MHwGSampler : public AbstractSampler {
public:
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Constructor(s) / Destructor :
  ////////////////////////////////////////////////////////////////////////////////////////////////////

  MHwGSampler();
  MHwGSampler(unsigned int memoryless_sampling_time, double expected_acceptance_ratio);
  virtual ~MHwGSampler();
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Other method(s) :
  ////////////////////////////////////////////////////////////////////////////////////////////////////

  /// Initialize the sampler
  virtual void InitializeSampler(std::shared_ptr<CandidateRandomVariables>& candidates, AbstractModel& model);

  /// Sample new realizations
  virtual void Sample(Realizations& reals, AbstractModel& model, const Observations& obs);

  
 private:
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Method(s) :
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  MHwGSampler(const MHwGSampler&);
  MHwGSampler& operator=(const MHwGSampler&);
  
  /// Sample one realization
  void MonoSample(AbstractModel& model, const Observations& obs);
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Attribute(s)
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
  
};
