#pragma once

#include <algorithm>
#include <map>
#include <memory>
#include <string>
#include <tuple>

#include "GaussianRandomVariable.h"
#include "AbstractModel.h"
#include "CandidateRandomVariables.h"
#include "Realizations.h"

class AbstractSampler {
public:

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // typedef :
  ////////////////////////////////////////////////////////////////////////////////////////////////////


  typedef typename LinearAlgebra<ScalarType>::MatrixType MatrixType;
  typedef typename LinearAlgebra<ScalarType>::VectorType VectorType;
  
  typedef std::vector<std::tuple<int, std::string, int>> MiniBlock;
  typedef typename std::unordered_map<int, VectorType> IntVectorHash;


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Constructor(s) / Destructor :
  ////////////////////////////////////////////////////////////////////////////////////////////////////

  AbstractSampler(){};
  virtual ~AbstractSampler(){}


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Encapsulation method(s) :
  ////////////////////////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Other method(s) :
  ////////////////////////////////////////////////////////////////////////////////////////////////////

  /// Initialize the sampler
  virtual void InitializeSampler(std::shared_ptr<CandidateRandomVariables>& candidates, AbstractModel& model) = 0;

  /// Sample new realizations of the model random variables
  virtual void Sample(Realizations& reals, AbstractModel& model, const Observations& obs) = 0;


protected:
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Method(s) :
  ////////////////////////////////////////////////////////////////////////////////////////////////////

  /// Compute the decreasing step size of the adaptive variances
  double DecreasingStepSize(int iter, int no_memory_time);

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Attribute(s)
  ////////////////////////////////////////////////////////////////////////////////////////////////////

  /// Blocks of the sampler
  std::vector<MiniBlock> blocks_;

  /// Sampling time without memory
  unsigned int memoryless_sampling_time_ = 10000;

  /// Candidates random variables, corresponding to those in the Model
  std::shared_ptr<CandidateRandomVariables> candidate_rand_var_;
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Acceptance-ratio related attribute(s)
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /// Acceptance ratio bandwidth calculation
  unsigned int acceptance_ratio_bandwidth_;
  
  /// Acceptance ratio on the last 
  std::unordered_map<std::string, VectorType> acceptance_ratio_;
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Adaptive-sampling related attribute(s)
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /// Acceptation ratio
  ScalarType expected_acceptance_ratio_ = 0.301;

  /// Adaptive iteration to update
  unsigned int acceptance_ratio_update_;
  

private:
  AbstractSampler(const AbstractSampler &);
  AbstractSampler& operator=(const AbstractSampler &);

};
