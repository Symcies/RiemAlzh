#ifndef TestAssert_h
#define TestAssert_h

typedef double ScalarType;

#include <iostream>
#include <vector>
#include <functional>
#include <cmath>
#include "LinearAlgebra.h"


class TestAssert {

public:
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // typedef :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /// Act as a constructor by initializing the m_Singleton attribut
    static TestAssert* Instance();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getter(s) and Setter(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /// Initialize the activity of the singleton
    static void Init(bool Active);
    

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    
    
protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor(s) / Destructor :
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    
    TestAssert();
    ~TestAssert();
    
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Method(s) :
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    /// Set the activity
    void SetActive(bool Active);
    
    /// Get the activity
    bool GetActive();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Attribute(s)
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /// Check if the test object is active
    bool m_IsActive = false;
    
    
};





#endif //TestAssert_h
