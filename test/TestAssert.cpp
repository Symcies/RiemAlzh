#include "TestAssert.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor(s) / Destructor :
////////////////////////////////////////////////////////////////////////////////////////////////////

TestAssert
::TestAssert() 
{
    
}

TestAssert
::~TestAssert() 
{
    
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Other method(s) :
////////////////////////////////////////////////////////////////////////////////////////////////////


TestAssert* TestAssert::Instance() 
{
    static TestAssert* Singleton = nullptr;
    
    if(Singleton == nullptr)
    {
        Singleton = new TestAssert;
    }
    return Singleton;
}


void
TestAssert
::Init(bool Active) 
{
   Instance()->SetActive(Active);
}

void 
TestAssert
::SetActive(bool Active) 
{
    m_IsActive = Active;
}

bool 
TestAssert
::GetActive() 
{
    return m_IsActive;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Other method(s) :
////////////////////////////////////////////////////////////////////////////////////////////////////
